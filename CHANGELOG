Changelog
=========
Release 2.0.1
-------------

Implemented changes:

General:
Outputs folder is now automatically generated when running simulation files if it does not exist already. Compute_isomorphism
also generates the output folder automatically if needed.

Test workflows have been updated to test more scripts:
- compute_isomorphism.py
- simulation_ipa.py
- scale_constants.py

Path management has been updated, "pkg_resources" library has been added. Scripts can now be run from any directory.
This library has been implemented in all simulation files (simulation_ipa.py and simulation_hpa.py) and to all utilities.


Release 2.0.0
-------------

Python implementation of POMSimulator for iso- (IPA) and hetero- (HPA) polyoxometalates. In this version, a new input/output
configuration has been implemented for the correct and organised use of the multiple files generated with POMSimulator.
Configuration files have been added to facilitate the tuning of the needed parameters to run the different simulations and
utilities across POMSimulator. Two examples of how to input parameters into the different routines within the framework,
one for IPAs and one for HPAs. A complete statistical workflow to treat speciation result has been implemented, clustering 
ensembles of similar speciation models and averaging them (see docs/manual.md for a more detailed explanation).

Implemented changes:

General:
For each studied system, a folder must be created, as it will be used to save the results derived from that system, thus
improving the user's file management and accessability to the results.

Configuration parameters are now included in the corresponding configuration file config_X.pomsim

./inputs:
- PMo_Set: folder containing ADF output files for the simplified phosphomolybdate system
- config_W.pomsim: configuration file for tungsten IPA system.
- config_PMo.pomsim: configuration file for phosphomolybdate HPA system.

./simulations:
- simulation_hpa.py: main simulation file to run POMSimulator for HPA systems

./utilities:

- hpa_speciation.py: calculation of speciation arrays for HPAs
- hpa_phase.py: calculation of speciation phase arrays for HPAs
- SM_clusterization.py: clusterization of speciation models for IPA and HPA systems
- cluster_model_selection.py: selection of specific SM clusters in IPA and HPA systems
- clust_boxplot_filtering.py: outlier filtering for SM clusters in IPA and HPA systems
- plot_reac_map_ipa.py and plot_reac_map_hpa.py: modified CRN generation

./pomsimulator/modules
- stats_module.py: functions used for SM clusterization and treatment
- helper_module.py: wrapper and supports functions for several POMSimulator components, simplifying the code of the utilities and simulation files

Release 1.0.0
-------------

First python implementation of POMSimulator for isopolyoxometalates

./pomsimulator/modules:
- text_module.py : functions for parsing the ADF outputs, and reading/writing chemical files such as .mol and .xyz
- graph_module.py : function for creating molecular graphs, isomorphic matrix, and chemical reaction network
- msce_module.py : function for setting the speciation models, activity functions, and chemical equilibrium related features
- Database.py : file that contains the useful dictionaries and experimental data 

./Simulation:
- simulation_test.py : simulation file to check that POMSimulator was well installed
- simulation_tungstates.py : main simulation file that contains all the workflow of POMSimulator for isopolyoxotungstates

./Utilities:
- compute_isomorphism.py : calculates the isomorphic matrix from the molecular graphs derived from Bader QTAIM calculations
- generate_mol_file.py : converts the Bader QTAIM bond connectivity to .mol files
- monometal_phase.py : calculates the speciation phase data array for isopolyoxometalates
- monometal_speciation.py : calculations the speciation data array for isopolyoxometalates
- plot_phase_diagram.py :  plots the speciation phase data array
- plot_reac_map.py : plots the chemical reaction network
- plot_speciation_diagram.py : plots the speciation data array
- scale_constants.py : scales the theoretical formation constants respect to the experimental constants (in Database.py)

./Input: folder that contains the ADF output file subfolders

./Output: folder that contains the chemical reaction network, formation constants and simulation related files


